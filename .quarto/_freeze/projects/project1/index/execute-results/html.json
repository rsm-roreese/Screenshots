{
  "hash": "8a0e1e327ea6f5970a4ef718577210b4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"A Replication of Karlan and List (2007)\"\nauthor: \"Robin Reese\"\ndate: today\ncallout-appearance: minimal # this hides the blue \"i\" icon on .callout-notes\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n## Introduction\n\nDean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2).\n\nIn this field experiment involving over 50,000 prior donors to a non-profit, the researchers investigate how offering matching grants affects charitable giving. Two-thirds of the sample were placed into a treatment group, receiving solicitation letters highlighting that their donations would be matched by an anonymous donor at various ratios and maximum amounts, while the remaining third, serving as a control group, received standard solicitation materials without mention of a match. The treatment group was further stratified into subgroups, each receiving tailored messaging about the matching ratio, the cap on the matching grant, and suggested donation amounts based on their previous giving history.\n\nThe study's key outcome measures were the response rate to the solicitation and the amount of money donated. By integrating subtle variations in the solicitation letter and the accompanying reply card, the experiment meticulously isolates the influence of the matching grant information. The results offer actionable insights into the effectiveness of different fundraising strategies, revealing the intricate ways in which donors' decisions are influenced not only by the economic benefit of matching grants but also by their previous engagement levels and the manner in which the opportunity to have their donation matched is communicated.\n\nThis project seeks to replicate their results.\n\n\n## Data\n\n### Description\n\nThe first step in our analysis of the data will be to load and explore the results. Below we bring in the state file and take a quick overview of the variables' counts, types, and distributions.\n\n::: {#d08cae41 .cell execution_count=1}\n``` {.python .cell-code}\n# Read the .dta file\nimport pandas as pd\n\ndf = pd.read_stata('karlan_list_2007.dta')\n\n# Get an overview of the data\ndf.info()\n\n# Describe the data\ndata_description = df.describe()\nprint(data_description)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 50083 entries, 0 to 50082\nData columns (total 51 columns):\n #   Column              Non-Null Count  Dtype   \n---  ------              --------------  -----   \n 0   treatment           50083 non-null  int8    \n 1   control             50083 non-null  int8    \n 2   ratio               50083 non-null  category\n 3   ratio2              50083 non-null  int8    \n 4   ratio3              50083 non-null  int8    \n 5   size                50083 non-null  category\n 6   size25              50083 non-null  int8    \n 7   size50              50083 non-null  int8    \n 8   size100             50083 non-null  int8    \n 9   sizeno              50083 non-null  int8    \n 10  ask                 50083 non-null  category\n 11  askd1               50083 non-null  int8    \n 12  askd2               50083 non-null  int8    \n 13  askd3               50083 non-null  int8    \n 14  ask1                50083 non-null  int16   \n 15  ask2                50083 non-null  int16   \n 16  ask3                50083 non-null  int16   \n 17  amount              50083 non-null  float32 \n 18  gave                50083 non-null  int8    \n 19  amountchange        50083 non-null  float32 \n 20  hpa                 50083 non-null  float32 \n 21  ltmedmra            50083 non-null  int8    \n 22  freq                50083 non-null  int16   \n 23  years               50082 non-null  float64 \n 24  year5               50083 non-null  int8    \n 25  mrm2                50082 non-null  float64 \n 26  dormant             50083 non-null  int8    \n 27  female              48972 non-null  float64 \n 28  couple              48935 non-null  float64 \n 29  state50one          50083 non-null  int8    \n 30  nonlit              49631 non-null  float64 \n 31  cases               49631 non-null  float64 \n 32  statecnt            50083 non-null  float32 \n 33  stateresponse       50083 non-null  float32 \n 34  stateresponset      50083 non-null  float32 \n 35  stateresponsec      50080 non-null  float32 \n 36  stateresponsetminc  50080 non-null  float32 \n 37  perbush             50048 non-null  float32 \n 38  close25             50048 non-null  float64 \n 39  red0                50048 non-null  float64 \n 40  blue0               50048 non-null  float64 \n 41  redcty              49978 non-null  float64 \n 42  bluecty             49978 non-null  float64 \n 43  pwhite              48217 non-null  float32 \n 44  pblack              48047 non-null  float32 \n 45  page18_39           48217 non-null  float32 \n 46  ave_hh_sz           48221 non-null  float32 \n 47  median_hhincome     48209 non-null  float64 \n 48  powner              48214 non-null  float32 \n 49  psch_atlstba        48215 non-null  float32 \n 50  pop_propurban       48217 non-null  float32 \ndtypes: category(3), float32(16), float64(12), int16(4), int8(16)\nmemory usage: 8.9 MB\n          treatment       control        ratio2        ratio3        size25  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.666813      0.333187      0.222311      0.222211      0.166723   \nstd        0.471357      0.471357      0.415803      0.415736      0.372732   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        1.000000      0.000000      0.000000      0.000000      0.000000   \n75%        1.000000      1.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n             size50       size100        sizeno         askd1         askd2  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.166623      0.166723      0.166743      0.222311      0.222291   \nstd        0.372643      0.372732      0.372750      0.415803      0.415790   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n75%        0.000000      0.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n       ...        redcty       bluecty        pwhite        pblack  \\\ncount  ...  49978.000000  49978.000000  48217.000000  48047.000000   \nmean   ...      0.510245      0.488715      0.819599      0.086710   \nstd    ...      0.499900      0.499878      0.168560      0.135868   \nmin    ...      0.000000      0.000000      0.009418      0.000000   \n25%    ...      0.000000      0.000000      0.755845      0.014729   \n50%    ...      1.000000      0.000000      0.872797      0.036554   \n75%    ...      1.000000      1.000000      0.938827      0.090882   \nmax    ...      1.000000      1.000000      1.000000      0.989622   \n\n          page18_39     ave_hh_sz  median_hhincome        powner  \\\ncount  48217.000000  48221.000000     48209.000000  48214.000000   \nmean       0.321694      2.429012     54815.700533      0.669418   \nstd        0.103039      0.378105     22027.316665      0.193405   \nmin        0.000000      0.000000      5000.000000      0.000000   \n25%        0.258311      2.210000     39181.000000      0.560222   \n50%        0.305534      2.440000     50673.000000      0.712296   \n75%        0.369132      2.660000     66005.000000      0.816798   \nmax        0.997544      5.270000    200001.000000      1.000000   \n\n       psch_atlstba  pop_propurban  \ncount  48215.000000   48217.000000  \nmean       0.391661       0.871968  \nstd        0.186599       0.258633  \nmin        0.000000       0.000000  \n25%        0.235647       0.884929  \n50%        0.373744       1.000000  \n75%        0.530036       1.000000  \nmax        1.000000       1.000000  \n\n[8 rows x 48 columns]\n```\n:::\n:::\n\n\n### Variable Definitions\n\n| Variable             | Description                                                         |\n|----------------------|---------------------------------------------------------------------|\n| `treatment`          | Treatment                                                           |\n| `control`            | Control                                                             |\n| `ratio`              | Match ratio                                                         |\n| `ratio2`             | 2:1 match ratio                                                     |\n| `ratio3`             | 3:1 match ratio                                                     |\n| `size`               | Match threshold                                                     |\n| `size25`             | \\$25,000 match threshold                                            |\n| `size50`             | \\$50,000 match threshold                                            |\n| `size100`            | \\$100,000 match threshold                                           |\n| `sizeno`             | Unstated match threshold                                            |\n| `ask`                | Suggested donation amount                                           |\n| `askd1`              | Suggested donation was highest previous contribution                |\n| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |\n| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |\n| `ask1`               | Highest previous contribution (for suggestion)                      |\n| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |\n| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |\n| `amount`             | Dollars given                                                       |\n| `gave`               | Gave anything                                                       |\n| `amountchange`       | Change in amount given                                              |\n| `hpa`                | Highest previous contribution                                       |\n| `ltmedmra`           | Small prior donor: last gift was less than median \\$35              |\n| `freq`               | Number of prior donations                                           |\n| `years`              | Number of years since initial donation                              |\n| `year5`              | At least 5 years since initial donation                             |\n| `mrm2`               | Number of months since last donation                                |\n| `dormant`            | Already donated in 2005                                             |\n| `female`             | Female                                                              |\n| `couple`             | Couple                                                              |\n| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |\n| `nonlit`             | Nonlitigation                                                       |\n| `cases`              | Court cases from state in 2004-5 in which organization was involved |\n| `statecnt`           | Percent of sample from state                                        |\n| `stateresponse`      | Proportion of sample from the state who gave                        |\n| `stateresponset`     | Proportion of treated sample from the state who gave                |\n| `stateresponsec`     | Proportion of control sample from the state who gave                |\n| `stateresponsetminc` | stateresponset - stateresponsec                                     |\n| `perbush`            | State vote share for Bush                                           |\n| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |\n| `red0`               | Red state                                                           |\n| `blue0`              | Blue state                                                          |\n| `redcty`             | Red county                                                          |\n| `bluecty`            | Blue county                                                         |\n| `pwhite`             | Proportion white within zip code                                    |\n| `pblack`             | Proportion black within zip code                                    |\n| `page18_39`          | Proportion age 18-39 within zip code                                |\n| `ave_hh_sz`          | Average household size within zip code                              |\n| `median_hhincome`    | Median household income within zip code                             |\n| `powner`             | Proportion house owner within zip code                              |\n| `psch_atlstba`       | Proportion who finished college within zip code                     |\n| `pop_propurban`      | Proportion of population urban within zip code                      |\n\n::::\n\n\n### Balance Test \n\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\n\nDirect t-tests and t-tests from linear regression are both statistical tools used to assess the significance of differences between groups or the impact of predictors. A direct t-test compares the means of two independent samples to determine if they come from distributions with equal means, making it ideal for straightforward comparisons between two groups, such as control and treatment conditions in an experiment. The resulting p-value indicates whether any observed difference is likely to be due to chance.\n\nIn contrast, a t-test from a linear regression analysis evaluates the significance of individual predictors within a more complex model that may include multiple variables. The t-statistic here assesses whether a coefficient differs significantly from zero, taking into account other factors in the model. This allows for the evaluation of each predictor's unique contribution and the control of confounding variables. Both types of t-tests rely on the assumption of normally distributed errors and can be adapted for equal or unequal variances between groups. While direct t-tests are best suited for simpler experimental designs, regression t-tests excel in multifaceted studies where multiple influences need to be accounted for simultaneously.\n\nWe'll define functions next that are able to perform both test methodologies on our dataset as needed.\n\n::: {#4d539fa0 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef direct_t_test(df, treatment_col, outcome_col):\n    # Drop any rows with missing values and ensure numeric data for consistency with regression\n    df = df.dropna(subset=[treatment_col, outcome_col])\n    df[treatment_col] = pd.to_numeric(df[treatment_col], errors='coerce')\n    df[outcome_col] = pd.to_numeric(df[outcome_col], errors='coerce')\n\n    # Separate the treatment and control groups\n    treatment_group = df[df[treatment_col] == 1][outcome_col]\n    control_group = df[df[treatment_col] == 0][outcome_col]\n\n    # Calculate means\n    mean_treatment = treatment_group.mean()\n    mean_control = control_group.mean()\n\n    # Calculate standard deviations\n    std_treatment = treatment_group.std(ddof=1)\n    std_control = control_group.std(ddof=1)\n\n    # Calculate sample sizes\n    n_treatment = len(treatment_group)\n    n_control = len(control_group)\n\n    # Calculate separate standard errors\n    se_treatment = std_treatment / np.sqrt(n_treatment)\n    se_control = std_control / np.sqrt(n_control)\n\n    # Calculate the t-statistic\n    t_stat = (mean_treatment - mean_control) / np.sqrt(se_treatment**2 + se_control**2)\n\n    # Calculate degrees of freedom using the Welch-Satterthwaite equation\n    df = ((se_treatment**2 + se_control**2)**2 /\n          ((se_treatment**4 / (n_treatment - 1)) + (se_control**4 / (n_control - 1))))\n\n    return t_stat, df\n\ndef run_regression(df, treatment_col, outcome_col):\n    # Drop any rows with missing values and ensure numeric data\n    df = df.dropna(subset=[treatment_col, outcome_col])\n    df[treatment_col] = pd.to_numeric(df[treatment_col], errors='coerce')\n    df[outcome_col] = pd.to_numeric(df[outcome_col], errors='coerce')\n\n    # Prepare the design matrix X with a constant (intercept) and the treatment indicator\n    X = sm.add_constant(df[treatment_col])\n    Y = df[outcome_col]\n\n    # Fit the OLS regression model\n    model = sm.OLS(Y, X).fit()\n\n    # Extract the t-statistic and p-value for the treatment variable\n    t_stat = model.tvalues[treatment_col]\n\n    # Return the t-statistic and degrees of freedom\n    return t_stat, model.df_resid\n\n# Example usage (you need to replace 'your_dataframe', 'treatment', and 'outcome' with your actual DataFrame and column names)\n# t_stat_direct, df_direct = direct_t_test(your_dataframe, 'treatment', 'outcome')\n# t_stat_regression, df_regression = run_regression(your_dataframe, 'treatment', 'outcome')\n# print(\"Direct t-test:\", t_stat_direct, \"df:\", df_direct)\n# print(\"Regression t-test:\", t_stat_regression, \"df:\", df_regression)\n\n```\n:::\n\n\nNow that the functions are defined, we can test different variables besides the outcome variables to see if the treatment and control groups show significant differences from each other.\n\n::: {#30284924 .cell execution_count=3}\n``` {.python .cell-code}\n# Prepare groups for direct t-test of 'mrm2'\nt_stat_direct, df_direct = direct_t_test(df, 'treatment', 'mrm2')\nt_stat_regression, df_regression = run_regression(df, 'treatment', 'mrm2')\nprint('Testing the mrm2 variable')\nprint(\"Direct t-test:\", t_stat_direct)\nprint(\"Regression t-test:\", t_stat_regression)\n\n# Prepare groups for direct t-test of 'female'\nt_stat_direct, df_direct = direct_t_test(df, 'treatment', 'female')\nt_stat_regression, df_regression = run_regression(df, 'treatment', 'female')\nprint('Testing the female variable')\nprint(\"Direct t-test:\", t_stat_direct)\nprint(\"Regression t-test:\", t_stat_regression)\n\n# Prepare groups for direct t-test of 'red0'\nt_stat_direct, df_direct = direct_t_test(df, 'treatment', 'red0')\nt_stat_regression, df_regression = run_regression(df, 'treatment', 'red0')\nprint('Testing the red0 variable')\nprint(\"Direct t-test:\", t_stat_direct)\nprint(\"Regression t-test:\", t_stat_regression)\n\n# Perform both t-tests of 'years'\nt_stat_direct, df_direct = direct_t_test(df, 'treatment', 'years')\nt_stat_regression, df_regression = run_regression(df, 'treatment', 'years')\nprint('Testing the years variable')\nprint(\"Direct t-test:\", t_stat_direct)\nprint(\"Regression t-test:\", t_stat_regression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTesting the mrm2 variable\nDirect t-test: 0.11953155228176904\nRegression t-test: 0.11949210581591684\nTesting the female variable\nDirect t-test: -1.7535132542518672\nRegression t-test: -1.7583691871450848\nTesting the red0 variable\nDirect t-test: 1.877281316440582\nRegression t-test: 1.8750884882812506\nTesting the years variable\nDirect t-test: -1.0909175279573782\nRegression t-test: -1.1030383745788988\n```\n:::\n:::\n\n\n## Experimental Results\n\n### Charitable Contribution Made\n\nAnalyzing whether matched donations lead to an increased response rate of making a donation is a critical first step in reproducing the results of a study because it directly assesses the effectiveness of the matching incentive as a motivational tool in charitable giving. This analysis establishes the foundational evidence needed to validate the underlying assumptions of fundraising strategies that utilize matching offers to enhance donor engagement and generosity. Below we'll plot the differences in response rate between the treatment and control groups.\n\n::: {#b9f55a60 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Calculate the proportions for the 'gave' column based on the 'treatment' indicator\nproportions = df.groupby('treatment')['gave'].mean()\n\n# Create a barplot\nplt.figure(figsize=(10, 6))\ncolors = ['#1f77b4', '#ff7f0e']  # Aesthetically pleasing color palette\nproportions.plot(kind='bar', color=colors)\n\n# Add labels and title\nplt.title('Proportion of People Who Donated by Group')\nplt.xlabel('Group')\nplt.ylabel('Proportion of Donations')\nplt.xticks(ticks=[0, 1], labels=['Control', 'Treatment'], rotation=0)  # Rename x-ticks for clarity\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=829 height=523}\n:::\n:::\n\n\nIt appears from a visualization that there is a difference. The treatment group has a slightly higher response rate than does the control group. How sure are we that this effect size is statistically significant rather than due to random chance?\n\nTo determine this the next step is to run a t-test between the treatment and control groups on the donation outcome. Using the binary variable 'gave'. This designates whether a person gave a donation in any amount.\n\n::: {#a927d10e .cell execution_count=5}\n``` {.python .cell-code}\nfrom scipy import stats\n\n# Perform both t-tests of 'years'\nt_stat_direct, df_direct = direct_t_test(df, 'treatment', 'gave')\nt_stat_regression, df_regression = run_regression(df, 'treatment', 'gave')\nprint('Testing the gave variable')\nprint(\"Direct t-test:\", t_stat_direct)\nprint(\"Regression t-test:\", t_stat_regression)\n\n# Calculate the p-value for a two-tailed test\np_value = 2 * (1 - stats.t.cdf(abs(t_stat_direct), df_direct))\n\nprint(\"P-value:\", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTesting the gave variable\nDirect t-test: 3.2094621908279835\nRegression t-test: 3.101361000543946\nP-value: 0.001330982345091547\n```\n:::\n:::\n\n\nThe above results show stastical values that lead one to believe the difference in response rates between the treatment and control groups are unlikely to have occurred by chance. It indicates that such financial incentives can effectively influence human behavior, enhancing the likelihood of donating or possibly increasing the donation amounts.\n\n::: {#c80acd6f .cell execution_count=6}\n``` {.python .cell-code}\nimport statsmodels.formula.api as smf\n\n# Run the probit regression model\ndef run_probit_regression(df, formula):\n    # Probit model using the formula interface\n    model = smf.probit(formula, data=df)\n    results = model.fit(disp=0)\n    return results\n\n# Use the probit regression function\nformula = 'gave ~ treatment'\nprobit_results = run_probit_regression(df, formula)\n\n# Print out the summary of the regression results\ncoefficients = probit_results.params\np_values = probit_results.pvalues\nprint(\"Treatment Coefficient: \", coefficients[1])\nprint(\"Treatment P-Value: \", p_values[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTreatment Coefficient:  0.08678462244745781\nTreatment P-Value:  0.0018523990147786633\n```\n:::\n:::\n\n\n### Differences between Match Rates\n\nIn the realm of charitable giving, the size of matched donations often plays a pivotal role in incentivizing potential donors. Understanding how different matching ratios influence donor behavior can provide valuable insights for optimizing fundraising strategies. This analysis focuses on evaluating the impact of various match rates—1:1, 2:1, and 3:1—on the likelihood of donations. By employing a series of t-tests, the study seeks to determine if higher match ratios significantly increase the response rate among donors, thereby testing the assumption that more generous matching offers might lead to higher participation rates in donation campaigns.\n\nBelow is the code to assess the differences in rates of response between different matching offers presented:\n\n::: {#eb700eed .cell execution_count=7}\n``` {.python .cell-code}\nfrom scipy import stats\n\n# Calculate the mean donation rate for each ratio category\nmean_ratio1 = df[df['ratio'] == 1]['gave'].mean()\nmean_ratio2 = df[df['ratio2'] == 1]['gave'].mean()\nmean_ratio3 = df[df['ratio3'] == 1]['gave'].mean()\n\n# Conduct t-tests\nt_test_1_vs_2 = stats.ttest_ind(df[df['ratio'] == 1]['gave'], df[df['ratio2'] == 1]['gave'], equal_var=False)\nt_test_1_vs_3 = stats.ttest_ind(df[df['ratio'] == 1]['gave'], df[df['ratio3'] == 1]['gave'], equal_var=False)\nt_test_2_vs_3 = stats.ttest_ind(df[df['ratio2'] == 1]['gave'], df[df['ratio3'] == 1]['gave'], equal_var=False)\n\n# Print the results\nprint(f\"Mean Donation Rate for 1:1 match: {mean_ratio1:.4f}\")\nprint(f\"Mean Donation Rate for 2:1 match: {mean_ratio2:.4f}\")\nprint(f\"Mean Donation Rate for 3:1 match: {mean_ratio3:.4f}\")\nprint(\"T-test Results:\")\nprint(\"1:1 vs 2:1:\", t_test_1_vs_2)\nprint(\"1:1 vs 3:1:\", t_test_1_vs_3)\nprint(\"2:1 vs 3:1:\", t_test_2_vs_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Donation Rate for 1:1 match: 0.0207\nMean Donation Rate for 2:1 match: 0.0226\nMean Donation Rate for 3:1 match: 0.0227\nT-test Results:\n1:1 vs 2:1: TtestResult(statistic=-0.965048975142932, pvalue=0.33453078237183076, df=22225.07770983836)\n1:1 vs 3:1: TtestResult(statistic=-1.0150174470156275, pvalue=0.31010856527625774, df=22215.0529778684)\n2:1 vs 3:1: TtestResult(statistic=-0.05011581369764474, pvalue=0.9600305476940865, df=22260.84918918778)\n```\n:::\n:::\n\n\nThe results of the t-tests reveal that the increase in match ratios from 1:1 to 2:1 and from 1:1 to 3:1 does not result in a statistically significant increase in donation rates, with p-values of 0.334 and 0.310, respectively. This suggests that while there is a slight increase in mean donation rates from 1:1 to 2:1 and 3:1 matches, these differences are not enough to be considered statistically meaningful. Furthermore, the comparison between the 2:1 and 3:1 match ratios, showing a p-value of 0.960, confirms that there is virtually no difference in donor response between these higher match rates. These findings align with the authors' comments that neither the match threshold nor the example donation amount notably affects donor behavior. This suggests that while intuitive expectations might lead one to believe that higher match ratios would significantly enhance donation likelihood due to more attractive incentives, the actual impact on donation behavior may be minimal. This could indicate donor insensitivity to incremental increases in match ratios beyond a certain point, challenging the efficacy of escalating match offers as a strategy to significantly boost donation rates.\n\nNext we'll use regression to look at the comparison of mean response rates for different matching ratios on whether people chose to donate. The coefficient of each variable [ratio1, ratio2, ratio3] can be looked at to determine the effect size between levels of matching presented. The analysis gives us a p-value as well to determine the significance of the movement suggested by the coefficient.\n\n::: {#a6cdcd1b .cell execution_count=8}\n``` {.python .cell-code}\ndf['ratio1'] = (df['ratio'] == 1).astype(int)\n\n# Prepare the design matrix X with a constant and the dummy variables for ratio\nX = sm.add_constant(df[['ratio1', 'ratio2', 'ratio3']])\nY = df['gave']\n\n# Fit the OLS regression model\nmodel = sm.OLS(Y, X).fit()\n\nresults = {param: {'Coefficient': model.params[param], 'P-value': model.pvalues[param]}\n               for param in model.params.keys()}\n\n# Print out the summary of the regression results\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'const': {'Coefficient': 0.01785821298016419, 'P-value': 4.7869277141173614e-59}, 'ratio1': {'Coefficient': 0.002890911245112018, 'P-value': 0.09662209260247782}, 'ratio2': {'Coefficient': 0.004775162266827, 'P-value': 0.006062639303220395}, 'ratio3': {'Coefficient': 0.004875186247079949, 'P-value': 0.005086912091717824}}\n```\n:::\n:::\n\n\nInteresting. The summary output will be returned to shortly. Next we'll compare the mean response rates between the matching offers. This will show how much the response rate moves as the offer is increased from 1:1 to 2:1 to 3:1.\n\n::: {#d99cec2a .cell execution_count=9}\n``` {.python .cell-code}\nmean_ratio1 = df[df['ratio1'] == 1]['gave'].mean()\nmean_ratio2 = df[df['ratio2'] == 1]['gave'].mean()\nmean_ratio3 = df[df['ratio3'] == 1]['gave'].mean()\n\n# Calculate the differences directly from the data\ndifference_1_to_2 = mean_ratio2 - mean_ratio1\ndifference_2_to_3 = mean_ratio3 - mean_ratio2\n\nprint(f\"Directly calculated difference in response rate from 1:1 to 2:1 match ratio: {difference_1_to_2:.4f}\")\nprint(f\"Directly calculated difference in response rate from 2:1 to 3:1 match ratio: {difference_2_to_3:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDirectly calculated difference in response rate from 1:1 to 2:1 match ratio: 0.0019\nDirectly calculated difference in response rate from 2:1 to 3:1 match ratio: 0.0001\n```\n:::\n:::\n\n\nFor housekeeping we should look to see if the model coefficients show a similar movement to the mean comparisons.\n\n::: {#cb706dd8 .cell execution_count=10}\n``` {.python .cell-code}\ncoefficients = model.params\n\n# Calculate the difference between ratio2 - ratio1 and ratio3 - ratio2\ndifference_ratio2_ratio1 = coefficients['ratio2'] - coefficients['ratio1']\ndifference_ratio3_ratio2 = coefficients['ratio3'] - coefficients['ratio2']\n\ndifference_ratio2_ratio1, difference_ratio3_ratio2\n\nprint(f\"Coefficient comparison difference in response rate from 1:1 to 2:1 match ratio: {difference_ratio2_ratio1:.4f}\")\nprint(f\"Coefficient comparison difference in response rate from 2:1 to 3:1 match ratio: {difference_ratio3_ratio2:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoefficient comparison difference in response rate from 1:1 to 2:1 match ratio: 0.0019\nCoefficient comparison difference in response rate from 2:1 to 3:1 match ratio: 0.0001\n```\n:::\n:::\n\n\nThe results of the t-tests reveal that the increase in match ratios from 1:1 to 2:1 and from 1:1 to 3:1 does not result in a statistically significant increase in donation rates, with p-values of 0.334 and 0.310, respectively. This suggests that while there is a slight increase in mean donation rates from 1:1 to 2:1 and 3:1 matches, these differences are not enough to be considered statistically meaningful. Furthermore, the comparison between the 2:1 and 3:1 match ratios, showing a p-value of 0.960, confirms that there is virtually no difference in donor response between these higher match rates. These findings align with the authors' comments that neither the match threshold nor the example donation amount notably affects donor behavior. This suggests that while intuitive expectations might lead one to believe that higher match ratios would significantly enhance donation likelihood due to more attractive incentives, the actual impact on donation behavior may be minimal. This could indicate donor insensitivity to incremental increases in match ratios beyond a certain point, challenging the efficacy of escalating match offers as a strategy to significantly boost donation rates.\n\n### Size of Charitable Contribution\n\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution. In order to do this we shall run the same t-test only this time we're using the donation amount relative to the treatment effect.\n\n::: {#468e6eb5 .cell execution_count=11}\n``` {.python .cell-code}\n# Perform both t-tests of 'amount'\nt_stat_direct, df_direct = direct_t_test(df, 'treatment', 'amount')\nt_stat_regression, df_regression = run_regression(df, 'treatment', 'amount')\nprint('Testing the amount variable')\nprint(\"Direct t-test:\", t_stat_direct)\nprint(\"Regression t-test:\", t_stat_regression)\n\n# Calculate the p-value for a two-tailed test\np_value = 2 * (1 - stats.t.cdf(abs(t_stat_direct), df_direct))\n\nprint(\"P-value:\", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTesting the amount variable\nDirect t-test: 1.9182283233541\nRegression t-test: 1.860502691500859\nP-value: 0.0550899208482003\n```\n:::\n:::\n\n\nThe analysis suggests that matched donations have a potentially positive, though not statistically significant, impact on donation amounts at the traditional 5% significance level. Given the proximity of the p-value to this threshold, organizations might still consider matched donations as part of a broader, diversified fundraising strategy. Barring additional research, it may yet prove a positive influence on donation amounts.\n\nAs a next step we'll filter the data to only show those who donated something. This can then be compared to the treatment variable to see if treatment has an effect on the amount given that can be teased out of the data. \n\n::: {#9fa16e44 .cell execution_count=12}\n``` {.python .cell-code}\n# Filter to include only rows where a positive donation was made\ndf_donors = df[df['amount'] > 0]\n\n# Prepare the design matrix X with a constant and the treatment indicator\nX = sm.add_constant(df_donors['treatment'])\nY = df_donors['amount']\n\n# Fit the OLS regression model\nmodel = sm.OLS(Y, X).fit()\n\nresults = {param: {'Coefficient': model.params[param], 'P-value': model.pvalues[param]}\n               for param in model.params.keys()}\n\n# Print out the summary of the regression results\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'const': {'Coefficient': 45.54026845637584, 'P-value': 5.473577513353547e-68}, 'treatment': {'Coefficient': -1.6683934553392588, 'P-value': 0.5614755766155095}}\n```\n:::\n:::\n\n\nThe coefficient for the treatment variable, which is negative, suggests that being in the treatment group (i.e., offered a matched donation) is associated with a decrease in the donation amount by approximately $1.67 compared to the control group. However, the p-value associated with this coefficient is 0.561, indicating that this effect is not statistically significant.\n\nThe regression analysis reveals that, contrary to expectations, the treatment (matched donations) does not lead to an increase in the amount donated. Instead, there's an indication (though not statistically significant) that it might decrease the amount donated if we are to read the outputs of the regression. All in all, there is not enough information here to say that donation amount specifically is moved by the treatment.\n\n::: {#cd18fa9d .cell execution_count=13}\n``` {.python .cell-code}\ntreatment_donated = df_donors[df_donors['treatment'] == 1]\ncontrol_donated = df_donors[df_donors['treatment'] == 0]\n\n# Calculate the mean donation amount for each group\nmean_treatment = treatment_donated['amount'].mean()\nmean_control = control_donated['amount'].mean()\n\n# Creating histograms\nplt.figure(figsize=(14, 6))\n\n# Histogram for treatment group\nplt.subplot(1, 2, 1)\nplt.hist(treatment_donated['amount'], bins=30, color='blue', alpha=0.7)\nplt.axvline(mean_treatment, color='red', linestyle='dashed', linewidth=3)\nplt.title('Donation Amounts - Treatment Group')\nplt.xlabel('Amount ($)')\nplt.ylabel('Frequency')\nplt.annotate(f'Mean: ${mean_treatment:.2f}', xy=(mean_treatment, 50),\n             xytext=(mean_treatment + 50, 10),\n             arrowprops=dict(facecolor='red', shrink=0.05),\n             horizontalalignment='right')\n\n# Histogram for control group\nplt.subplot(1, 2, 2)\nplt.hist(control_donated['amount'], bins=30, color='green', alpha=0.7)\nplt.axvline(mean_control, color='red', linestyle='dashed', linewidth=3)\nplt.title('Donation Amounts - Control Group')\nplt.xlabel('Amount ($)')\nplt.ylabel('Frequency')\nplt.annotate(f'Mean: ${mean_control:.2f}', xy=(mean_control, 20),\n             xytext=(mean_control - 150, 10),\n             arrowprops=dict(facecolor='red', shrink=0.05),\n             horizontalalignment='left')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=1333 height=564}\n:::\n:::\n\n\n## Simulation Experiment\n\nAs a reminder of how the t-statistic \"works,\" in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\n\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made. \n\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size  is Bernoulli with probability p=0.022 that a donation is made.\n\n### Law of Large Numbers\n\nIn the provided text, the author outlines an educational simulation designed to illustrate key statistical principles, namely the Law of Large Numbers and the Central Limit Theorem, using a practical example from a charitable donation context. By setting up a scenario where the probabilities of making a donation differ between respondents who receive a match and those who do not, the simulation aims to show how differences in probabilities influence donation behaviors over a large number of trials. Specifically, respondents who do not receive a match have a lower probability (0.018) of donating compared to those who receive a match (0.022).\n\nThe code below is structured to generate a substantial number of simulations—10,000 for each group—to model donation outcomes according to the specified Bernoulli distributions. It uses Python’s numpy library to simulate these outcomes, ensuring reproducibility by setting a random seed. Once the donation data for both control (no match) and treatment (match) groups are simulated, the script calculates the cumulative average of the differences in donation probabilities between the two groups across the number of draws. This method allows the plot to visually depict how the average differences evolve as more data points are considered, highlighting the convergence behavior predicted by the Law of Large Numbers.\n\n::: {#7d2d932a .cell execution_count=14}\n``` {.python .cell-code}\n# Set the true probabilities for control and treatment\ntrue_prob_control = 0.018\ntrue_prob_treatment = 0.022\n\n# Number of simulations/draws\nnum_simulations = 10000\n\n# Simulate donations for control and treatment groups\nnp.random.seed(0)  # For reproducibility\ncontrol_donations = np.random.binomial(1, true_prob_control, num_simulations)\ntreatment_donations = np.random.binomial(1, true_prob_treatment, num_simulations)\n\n# Compute the cumulative average of the differences\ncumulative_differences = np.cumsum(treatment_donations - control_donations) / np.arange(1, num_simulations + 1)\n\n# Plot the cumulative averages\nplt.figure(figsize=(10, 6))\nplt.plot(cumulative_differences, color='red', lw=2)\nplt.axhline(y=true_prob_treatment - true_prob_control, color='blue', lw=1, linestyle='--')\n\nplt.xlabel('Number of Draws')\nplt.ylabel('Cumulative Average Difference')\nplt.title('Cumulative Average Difference in Donation Rate')\nplt.show()\n\nprint(\"The mean difference is \" + str(true_prob_treatment - true_prob_control) + \" (the blue hash line).\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=829 height=523}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean difference is 0.004 (the blue hash line).\n```\n:::\n:::\n\n\nThe plot generated by the code visually confirms the theoretical expectation: as the number of simulations increases, the cumulative average of the differences should approach the true difference in means (0.004) between the control and treatment groups. This is depicted on the plot by the blue dashed line at the level of the true mean difference. The exercise not only reinforces the statistical theory behind sampling distributions and their averages but also provides an intuitive grasp of how small probability differences can be detected and quantified with sufficient data, underlining the practical applications of these concepts in analyzing and interpreting data from real-world experiments. This simulation thereby serves as a powerful tool in both teaching and understanding statistical inference through a direct and engaging approach.\n\n### Central Limit Theorem\n\n\nThe Central Limit Theorem (CLT) is a fundamental principle in statistics that plays a pivotal role in the simulation above. It states that, regardless of the distribution of the population, the distribution of the sample means will approximate a normal distribution as the sample size increases, provided the samples are independent and identically distributed with a finite mean and variance. This theorem is crucial because it justifies the use of normal probability theory in the inference about the mean of a population, even when the population itself is not normally distributed.\n\nIn this scenario, the Central Limit Theorem comes into play by ensuring that the distribution of the cumulative average differences between the treatment and control groups will approach a normal distribution as the number of draws (i.e., sample size) increases. Each draw represents a Bernoulli trial where a donation is made with a certain probability. As you simulate more trials, the average of these results (due to the law of large numbers) will converge not only towards the true mean difference but also the distribution of these averages will start to resemble a normal distribution (thanks to the CLT).\n\n::: {#950a31aa .cell execution_count=15}\n``` {.python .cell-code}\n# Let's generate the histograms for the sample sizes specified and comment on their distribution.\n\n# Function to simulate the process and calculate the averages\ndef simulate_averages(sample_size, repetitions, p_control, p_treatment):\n    control_means = np.random.binomial(sample_size, p_control, repetitions) / sample_size\n    treatment_means = np.random.binomial(sample_size, p_treatment, repetitions) / sample_size\n    return treatment_means - control_means\n\n# Sample sizes to generate histograms for\nsample_sizes = [50, 200, 500, 1000]\n\n# Control and treatment probabilities\np_control = 0.018\np_treatment = 0.022\n\n# Number of repetitions to calculate averages\nrepetitions = 1000\n\n# Set up the plot\nfig, axes = plt.subplots(2, 2, figsize=(12, 8))\naxes = axes.flatten()\n\n# Generate the histograms\nfor i, sample_size in enumerate(sample_sizes):\n    # Simulate the differences in averages\n    avg_differences = simulate_averages(sample_size, repetitions, p_control, p_treatment)\n    \n    # Plot histogram horizontally\n    axes[i].hist(avg_differences, bins=30, orientation='horizontal', color='skyblue', edgecolor='black')\n    mean_value = np.mean(avg_differences)\n    axes[i].axhline(y=mean_value, color='red', linestyle='dashed', linewidth=2)\n    \n    # Annotate the mean difference\n    axes[i].annotate(f'Mean: {mean_value:.4f}', xy=(0.5, mean_value), xytext=(10, 0), \n                     textcoords='offset points', fontsize=10, color='red', ha='center', va='bottom')\n    \n    # Set title and labels\n    axes[i].set_title(f'Sample size: {sample_size}')\n    axes[i].set_ylabel('Average Difference')\n    axes[i].set_xlabel('Frequency')\n\n# Adjust the layout\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=1141 height=756}\n:::\n:::\n\n\nFor each histogram corresponding to different sample sizes (50, 200, 500, 1000), zero should ideally be within the tails of the distribution if there is no true difference. \n\nSince the true probabilities differ by 0.004 (p_treatment - p_control), zero is not expected to be in the center if the simulation reflects the true difference.\n\nAs sample size increases, the distribution of the average differences should become more centered around the true difference (0.004), and the variance should decrease, making the distribution narrower around the mean. Though there is an element of randomness in each sample, we can see that as n increases the peak of the histogram starts to converge around the mean value we know to be 0.004.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}